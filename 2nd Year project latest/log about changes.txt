/******Employee registration****/
url:POst: http://localhost:8080/employees/add
structure:
 {
	"employeeId": 45,         // not necessary
	"firstname": "ffed",
	"lastname": "l2ited",
	"nic": "11245v",        // unique
	"gender":"male",
	"email": "22t2.com",   //unique
	"password": "1223",
	"contactNo":"1rr222",     //unique
	"address":"Kegalle",
        "status": "Event Organizer"        // use a drop menu to select this
      
	
 }

return the object saved.

****Updating an emmpoyee is also do e through the same link above while id, nic, email are constant.

url: http://localhost:8080/employees/all
  Return all the employees as a list[] in above format





/***********************************************************************/

                    Asset Register
url:  [POST] http://localhost:8080/asset/add
structure: 
{
        "id": 21                       //This field is not necessory to add from frontend
          /////////////////assetId field is no need to sent from frontend                    
	"assetcategory":"Laptop",        //not null       // use a drop menu with  tv, SoundSystem, UPS, router, Projector,Furniture, Computer, 
	"brandName": "Huawei 10353 ",
	"boughtCompanyName": "Abans",
	"buyingPrice": 23.34,                     // THIS IS A DOUBLE VALUE	
	"warrantyStatus": "YES",        // YES or   NO
	"boughtDate":"2010/11/17",
	 "displaySize": "24x34",
	 "ram": "2GB",                // for displays and desktop computers
	 "capacity": "1TB",          // for displays and desktop computers
	 "processor": "intel core i7",            //for displays and desktop computers
	 "description": "nothng"
         "categoryTypes": "..."     // drop down menu ... Laptop, PC
         "yrs": "2",               // warranty years
         "months": "3" ,           //  warranty months
         "days": "0" ,             // warranty days
         "broken": false       // boolean ; auto set by backend
         "companyContact":   // int max=10
         "boughtCompanyAddress":         ,//string
         "location":       ,// 
      
}

* other fields must be set to null if there is no data
return an object in the above format.

****************To get all the assets
url: [GET]http://localhost:8080/asset/all






********************** To delete an asset by Id
deleting id must be sent as a request parameter in the url
Return true if deleted function runs well.
Parameter name should be *id*

url: [DELETE] http://localhost:8080/asset/delete

with id,url looks like:  http://localhost:8080/asset/delete?id=

/**********************************************************

/**********************************************************


********************** To delete an employee by nic
deleting nic must be sent as a request parameter in the url
Return true if deleted function runs well.
Parameter name should be *nic*

url: [DELETE] http://localhost:8080/employees/delete

with nic,url looks like:  http://localhost:8080/employees/delete?nic=

/*************************************************************

/*********************** Requesting an Asset***************************************************/
url: [POST] http://localhost:8080/assign/request/add
structure:
{
	"beginDate": "2018-03-14",                           // asset needing date
	"dueDate": "2018-06-20",                            // asset returning date
	"requestedAsset": {
		                
				"assetId": "id4"              // frontend should send "assetId" (Not "id") to identify the asset
						              // Other fields of the asset is not mandatory.But sending them here is not an error
                            },
         "userAssigned":  {
                    	
				"nic": "4v"                  //Other fields are okay, but nic is Mandatory   

                           }
}

This returns a full record of the inserted assigning to the frontend.

/*********************** Bookingan Asset***************************************************/
url: [POST] http://localhost:8080/assign/book/add
structure:
{
	"beginDate": "2018-03-14",                           // asset needing date
	"dueDate": "2018-06-20",                            // asset returning date
        "assetId": "id4",
        "requestedNic": "4v" 
        "description"; "df gjfgdfgj"  
/*	"requestedAsset": {
		                
				"assetId": "id4"              // frontend should send "assetId" (Not "id") to identify the asset
						              // Other fields of the asset is not mandatory.But sending them here is not an error
                            },
         "userAssigned":  {
                    	
				"nic": "4v"                  //Other fields are okay, but nic is Mandatory   

                           }   */
}

This returns a full record of the inserted assigning to the frontend.

/********************************************************************************************************************************/
/**********************************************************************************************************************************/
/*******************************************************************************************************************************/
* *************************************Add a breakdown********************************************

url: [POST] http://localhost:8080/breakdown/add
structure:
{
	"anyMessage": "no message yet",
	"informedBy": {
		               "nic": "4v"                   // nic is used to identify the user
                      },
    "brokenAsset": {
    	                "assetId": "LAP115"                  // asseId is used to identify the asset
                   }
	
}

This url returns a record of breakdown made in the below format.

{
    "id": 49,
    "anyMessage": "no message yet",
    "": "",
    "" : "" ,
    "warrantyStatus": false,
    "informedDate": "2019-08-04T04:47:14.797+0000",
    "informedBy": {
        "employeeId": 7,
        "firstname": "ffed",
        "lastname": "l2ited",
        "nic": "4v",
        "gender": "male",
        "email": "4v.com",
        "password": "1223",
        "contactNo": "44",
        "status": "Event Organizer",
        "address": "Kegalle",
        "img": null
    },
    "brokenAsset": {
        "id": 44,
        "assetId": "LAP115",
        "assetCategory": "Laptop",
        "brandName": "Leee 10353 ",
        "boughtCompanyName": "Metropolitan",
        "buyingPrice": 23.34,
        "warrantyStatus": "yes for now",
        "boughtDate": "2010/11/17",
        "displaySize": "24x34",
        "ram": "2GB",
        "capacity": "1TB",
        "description": "no dip",
        "processor": "intel core i7",
        "broken": true
    },
    "approvedByAssetMananger": false,
    "assignedToRepairManager": false
}




/**********************************************************************************************************************************/


// Show all pending requests by Department head ( requests not yet approved by department head)

url : (GET) http://localhost:8080/assign/request/view/pending/departmentHead

returns  list of assignings: Assign  



/***********************************************************************************************************************************/

// Show all pending requests by AssetManager ( requests not yet approved by asst Manager  But  already approved by department head)

url: (GET) http://localhost:8080/assign/request/view/pending/assetMananger

returns a list of assignings: Assign 


/************************************************************************************************************************************/


// Approve requests by Asset Manager and department head

by Department Head url: [POST] http://localhost:8080/assign/confirmation/departmenthead
by asset Manager url: [POST] http://localhost:8080/assign/confirmation/assetmanager

Frontend request must send a bodyas below

  {
    "id": 2  // assign id must be sent to backend
  }

If succeeded, 
   returns ResponseEntity.ok(updatedModel: AssignModel)
if failed
 return null;

/********************************************************************************************************************************/


// Reject requests by Asset Manager and department head

by Department Head url: [POST] http://localhost:8080/assign/reject/departmenthead
by asset Manager url: [POST] http://localhost:8080/assign/reject/assetmanager

Frontend request must send a bodyas below

  {
    "id": 2  // assign id must be sent to backend
  }

If succeeded, 
   returns ResponseEntity.ok(updatedModel: AssignModel)
if failed
 return null;


/****************************************************************************************************************************************/


 View All feedbacks
url: {GET} http://localhost:8080/feedback/all

return an object as below
     
{
    "id":   ,                            // number
    "fname":    ,                 // String
    "email":     ,             //String
    "subject":    ,               //String
    "message":     ,            //string
   "date"     ,               //string     

}

/*****************************************************************************************************************/



